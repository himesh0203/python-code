from cryptography.fernet import Fernet
import base64
import os
import getpass

# Generate or load master key
def load_key():
    if os.path.exists("vault.key"):
        with open("vault.key", "rb") as key_file:
            return key_file.read()
    else:
        key = Fernet.generate_key()
        with open("vault.key", "wb") as key_file:
            key_file.write(key)
        return key

# Encrypt password
def encrypt_password(password, key):
    f = Fernet(key)
    return f.encrypt(password.encode())

# Decrypt password
def decrypt_password(token, key):
    f = Fernet(key)
    return f.decrypt(token).decode()

# Save credentials
def save_credentials(service, username, encrypted_password):
    with open("vault.db", "a") as vault:
        vault.write(f"{service},{username},{encrypted_password.decode()}\n")

# Load credentials
def load_credentials(key):
    if not os.path.exists("vault.db"):
        print("🔐 No credentials stored yet.")
        return
    print("\n🔓 Stored Credentials:")
    with open("vault.db", "r") as vault:
        for line in vault:
            service, username, enc_pass = line.strip().split(",")
            try:
                password = decrypt_password(enc_pass.encode(), key)
                print(f"- {service}: {username} / {password}")
            except Exception:
                print(f"- {service}: {username} / [Decryption Failed]")

# Main interface
def main():
    key = load_key()
    print("🔐 Welcome to Secure Password Vault")
    while True:
        print("\nOptions:\n1. Add Credential\n2. View Credentials\n3. Exit")
        choice = input("Select (1/2/3): ").strip()
        if choice == "1":
            service = input("Service Name: ").strip()
            username = input("Username: ").strip()
            password = getpass.getpass("Password (hidden): ").strip()
            encrypted = encrypt_password(password, key)
            save_credentials(service, username, encrypted)
            print("✅ Credential saved securely.")
        elif choice == "2":
            load_credentials(key)
        elif choice == "3":
            print("👋 Exiting Vault. Stay secure!")
            break
        else:
            print("❌ Invalid option. Try again.")

if __name__ == "__main__":
    main()
