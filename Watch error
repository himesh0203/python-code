import cv2
import numpy as np
import mediapipe as mp
from tensorflow.keras.models import load_model

# Initialize MediaPipe Pose Estimation
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)

# Load pre-trained model for exercise recognition
model = load_model('exercise_recognition_model.h5')

class VirtualFitnessCoach:
    def __init__(self):
        self.exercises = {
            'push-up': 'Push-ups help build upper body strength.',
            'squat': 'Squats target your legs and glutes.',
            'lunge': 'Lunges improve balance and leg strength.'
        }

    def recognize_exercise(self, pose_landmarks):
        # Preprocess pose landmarks
        landmarks = np.array([[lm.x, lm.y, lm.z] for lm in pose_landmarks.landmark])
        landmarks = landmarks.flatten()

        # Predict exercise
        prediction = model.predict(landmarks.reshape(1, -1))
        exercise = np.argmax(prediction)

        return list(self.exercises.keys())[exercise]

    def provide_feedback(self, exercise, pose_landmarks):
        # Analyze pose landmarks for feedback
        feedback = ''
        if exercise == 'push-up':
            # Check if arms are straight
            if pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ELBOW].y < pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_SHOULDER].y:
                feedback += 'Keep your arms straight. '
        elif exercise == 'squat':
            # Check if knees are behind toes
            if pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE].x < pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ANKLE].x:
                feedback += 'Keep your knees behind your toes. '

        return feedback

def main():
    coach = VirtualFitnessCoach()
    cap = cv2.VideoCapture(0)

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        # Convert frame to RGB
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Perform pose estimation
        results = pose.process(rgb_frame)

        if results.pose_landmarks:
            # Recognize exercise
            exercise = coach.recognize_exercise(results.pose_landmarks)
            print(f'Exercise: {exercise}')

            # Provide feedback
            feedback = coach.provide_feedback(exercise, results.pose_landmarks)
            print(f'Feedback: {feedback}')

            # Draw pose landmarks
            mp_drawing = mp.solutions.drawing_utils
            mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        cv2.imshow('Virtual Fitness Coach', frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
