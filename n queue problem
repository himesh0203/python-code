def solve_n_queens(n):
   # Helper function to check if placing a queen is safe
   def is_safe(board, row, col):
       for i in range(row):
           if board[i][col] == "Q" or \
              (col - row + i >= 0 and board[i][col - row + i] == "Q") or \
              (col + row - i < n and board[i][col + row - i] == "Q"):
               return False
       return True
   # Backtracking function to place queens row by row
   def backtrack(row):
       if row == n:
           result.append(["".join(row) for row in board])
           return
       for col in range(n):
           if is_safe(board, row, col):
               board[row][col] = "Q" # Place queen
               backtrack(row + 1) # Recurse to the next row
               board[row][col] = "." # Backtrack and remove queen
   # Initialize the board and result container
   result = []
   board = [["."] * n for _ in range(n)]
   backtrack(0)
   return result
# Example usage
n = 8 # Solve for an 8x8 chessboard
solutions = solve_n_queens(n)
print(f"Number of solutions for {n}-Queens: {len(solutions)}")
for solution in solutions:
   for row in solution:
       print(row)
   print()
