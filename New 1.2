import socket
import threading
import os

# Configuration
HOST = '127.0.0.1'  # Localhost
PORT = 8080         # Port to listen on
WEB_ROOT = 'web_content' # Directory for serving static files

# Create a simple web_content directory and a dummy index.html if they don't exist
if not os.path.exists(WEB_ROOT):
    os.makedirs(WEB_ROOT)
if not os.path.exists(os.path.join(WEB_ROOT, 'index.html')):
    with open(os.path.join(WEB_ROOT, 'index.html'), 'w') as f:
        f.write("<h1>Welcome to a Simple Python Web Server!</h1>")
        f.write("<p>This is a demonstration of a multi-threaded server.</p>")

class ThreadedWebServer:
    def __init__(self, host, port, web_root):
        self.host = host
        self.port = port
        self.web_root = web_root
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.server_socket.bind((self.host, self.port))
        self.server_socket.listen(5)
        print(f"Server listening on {self.host}:{self.port}")

    def _handle_client(self, client_socket):
        try:
            request_data = client_socket.recv(4096).decode('utf-8')
            if not request_data:
                return

            request_lines = request_data.split('\r\n')
            request_line = request_lines[0]
            method, path, _ = request_line.split(' ')

            if method == 'GET':
                file_path = os.path.join(self.web_root, path.lstrip('/'))
                if os.path.isdir(file_path):
                    file_path = os.path.join(file_path, 'index.html')

                if os.path.exists(file_path) and os.path.isfile(file_path):
                    with open(file_path, 'rb') as f:
                        content = f.read()
                    response_headers = "HTTP/1.1 200 OK\r\n"
                    response_headers += f"Content-Length: {len(content)}\r\n"
                    response_headers += "Content-Type: text/html\r\n\r\n"
                    client_socket.sendall(response_headers.encode('utf-8') + content)
                else:
                    response = "HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n<h1>404 Not Found</h1>"
                    client_socket.sendall(response.encode('utf-8'))
            else:
                response = "HTTP/1.1 501 Not Implemented\r\nContent-Type: text/html\r\n\r\n<h1>501 Not Implemented</h1>"
                client_socket.sendall(response.encode('utf-8'))
        except Exception as e:
            print(f"Error handling client: {e}")
        finally:
            client_socket.close()

    def start(self):
        while True:
            client_socket, addr = self.server_socket.accept()
            print(f"Accepted connection from {addr}")
            client_handler = threading.Thread(target=self._handle_client, args=(client_socket,))
            client_handler.daemon = True # Allow main program to exit even if threads are running
            client_handler.start()

if __name__ == "__main__":
    server = ThreadedWebServer(HOST, PORT, WEB_ROOT)
    server.start()
