from collections import defaultdict
import sys

class CountingContext:
    def __init__(self, key_type):
        self.counter = defaultdict(key_type)

    def __enter__(self):
        print("Entering context manager...")
        return self.counter

    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Exiting context manager...")
        if exc_type:
            print(f"An exception occurred: {exc_type.__name__}: {exc_val}", file=sys.stderr)
            return False # Propagate the exception
        print(f"Final counts: {dict(self.counter)}")
        return True

# Example usage
with CountingContext(int) as counts:
    text = "this is a test of a text string"
    for word in text.split():
        counts[word] += 1
    # Intentionally cause an error to demonstrate __exit__ handling
    # print(1 / 0)
    print("Intermediate counts:", dict(counts))

# The context manager ensures proper cleanup, even if an error occurs.
