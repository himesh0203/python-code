import math

class ProceduralArtGenerator:
    """
    Generates abstract procedural art using mathematical functions and character-based rendering.
    """
    def __init__(self, width=80, height=25, seed=None):
        self.width = width
        self.height = height
        self.seed = seed if seed is not None else 0
        self.grid = [[' ' for _ in range(width)] for _ in range(height)]
        self.characters = [' ', '.', ':', '-', '=', '+', '*', '#', '%', '@']

    def _get_char_intensity(self, value):
        """Maps a float value (0-1) to a character based on intensity."""
        index = int(value * (len(self.characters) - 1))
        return self.characters[index]

    def generate_pattern(self, func_type="sine_wave", complexity=1.0):
        """
        Generates a pattern based on the specified function type and complexity.
        Available func_type: "sine_wave", "perlin_like", "radial_gradient"
        """
        for y in range(self.height):
            for x in range(self.width):
                val = 0.0
                if func_type == "sine_wave":
                    val = (math.sin(x * 0.1 * complexity + self.seed) + math.cos(y * 0.1 * complexity + self.seed) + 2) / 4
                elif func_type == "perlin_like":
                    # Simplified Perlin-like noise using multiple sine waves
                    val = (math.sin(x * 0.05 * complexity + self.seed) * math.cos(y * 0.07 * complexity + self.seed) +
                           math.sin(x * 0.12 * complexity + self.seed) * math.cos(y * 0.03 * complexity + self.seed)) / 2 + 0.5
                elif func_type == "radial_gradient":
                    center_x, center_y = self.width / 2, self.height / 2
                    distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)
                    max_distance = math.sqrt(center_x**2 + center_y**2)
                    val = 1 - (distance / max_distance)**complexity
                
                self.grid[y][x] = self._get_char_intensity(max(0.0, min(1.0, val)))

    def render(self):
        """Renders the generated art to the console."""
        for row in self.grid:
            print("".join(row))

if __name__ == "__main__":
    # Example Usage:
    # Create a generator with custom dimensions and a seed
    art_gen = ProceduralArtGenerator(width=100, height=30, seed=42)

    print("--- Sine Wave Pattern ---")
    art_gen.generate_pattern(func_type="sine_wave", complexity=1.5)
    art_gen.render()

    print("\n--- Perlin-like Noise Pattern ---")
    art_gen.generate_pattern(func_type="perlin_like", complexity=0.8)
    art_gen.render()

    print("\n--- Radial Gradient Pattern ---")
    art_gen.generate_pattern(func_type="radial_gradient", complexity=2.0)
    art_gen.render()
