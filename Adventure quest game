class Room:
    """Represents a location in the game world."""
    def __init__(self, name, description, exits=None, items=None):
        self.name = name
        self.description = description
        self.exits = exits if exits is not None else {}  # {direction: Room_object}
        self.items = items if items is not None else []  # [item_name]

    def add_exit(self, direction, room):
        self.exits[direction] = room

    def add_item(self, item):
        self.items.append(item)

    def remove_item(self, item):
        if item in self.items:
            self.items.remove(item)
            return True
        return False

class Player:
    """Represents the player character."""
    def __init__(self, current_room, inventory=None):
        self.current_room = current_room
        self.inventory = inventory if inventory is not None else []

    def move(self, direction):
        if direction in self.current_room.exits:
            self.current_room = self.current_room.exits[direction]
            return True
        return False

    def take_item(self, item_name):
        if self.current_room.remove_item(item_name):
            self.inventory.append(item_name)
            return True
        return False

    def has_item(self, item_name):
        return item_name in self.inventory

def create_game_world():
    """Initializes the game world with rooms and items."""
    # Create rooms
    forest = Room("Forest Path", "You are on a winding path through a dense forest. A faint light can be seen to the north.")
    clearing = Room("Forest Clearing", "A small, peaceful clearing in the forest. A sparkling stream flows nearby.")
    cave_entrance = Room("Cave Entrance", "A dark, ominous cave entrance. You hear dripping water from within.")
    inner_cave = Room("Inner Cave", "The cave narrows here. It's very dark. You might need a light source.")
    treasure_room = Room("Treasure Room", "You've found a hidden chamber filled with glittering treasures!")

    # Add exits
    forest.add_exit("north", clearing)
    clearing.add_exit("south", forest)
    clearing.add_exit("east", cave_entrance)
    cave_entrance.add_exit("west", clearing)
    cave_entrance.add_exit("enter", inner_cave)
    inner_cave.add_exit("exit", cave_entrance)
    inner_cave.add_exit("forward", treasure_room) # Requires 'torch' to proceed
    treasure_room.add_exit("back", inner_cave)

    # Add items
    clearing.add_item("key")
    cave_entrance.add_item("torch")
    treasure_room.add_item("gold_coin")

    return forest, treasure_room # Start room and winning room

def play_game():
    """Main game loop."""
    start_room, winning_room = create_game_world()
    player = Player(start_room)
    game_over = False

    print("Welcome to Adventure Quest!")
    print("Type 'help' for available commands.")

    while not game_over:
        print(f"\n{player.current_room.name}")
        print(player.current_room.description)
        if player.current_room.items:
            print(f"You see: {', '.join(player.current_room.items)}")
        print(f"Exits: {', '.join(player.current_room.exits.keys())}")
        print(f"Inventory: {', '.join(player.inventory) if player.inventory else 'empty'}")

        command = input("> ").lower().strip().split(' ', 1)
        action = command[0]
        arg = command[1] if len(command) > 1 else None

        if action == "move":
            if player.move(arg):
                if player.current_room == winning_room:
                    print("\nCongratulations! You found the treasure and won the game!")
                    game_over = True
                elif player.current_room.name == "Inner Cave" and not player.has_item("torch"):
                    print("It's too dark to proceed further without a light source.")
                    player.current_room = player.current_room.exits["exit"] # Force back to cave entrance
            else:
                print("You cannot go that way.")
        elif action == "take":
            if arg:
                if player.take_item(arg):
                    print(f"You picked up the {arg}.")
                else:
                    print(f"There is no {arg} here.")
            else:
                print("What do you want to take?")
        elif action == "help":
            print("Commands: move <direction>, take <item>, inventory, quit")
        elif action == "inventory":
            print(f"Your inventory contains: {', '.join(player.inventory) if player.inventory else 'nothing'}.")
        elif action == "quit":
            game_over = True
            print("Exiting game.")
        else:
            print("Invalid command. Type 'help' for assistance.")

if __name__ == "__main__":
    play_game()
